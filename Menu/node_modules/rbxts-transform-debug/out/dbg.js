"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformToIIFEDebugPrint = exports.createCustomIIFEBlock = exports.createDebugObject = exports.createIIFEBlock = exports.transformToInlineDebugPrint = void 0;
var typescript_1 = __importStar(require("typescript"));
var shared_1 = require("./shared");
function createPrintCallExpression(args) {
    return typescript_1.factory.createCallExpression(typescript_1.factory.createIdentifier("print"), undefined, args);
}
function transformToInlineDebugPrint(node) {
    return createPrintCallExpression([(0, shared_1.createExpressionDebugPrefixLiteral)(node), node]);
}
exports.transformToInlineDebugPrint = transformToInlineDebugPrint;
/**
 * Creates a IIFE debug expression
 * @param id The identifier
 * @param argument The expression
 */
function createIIFEBlock(id, argument) {
    return typescript_1.factory.createBlock([
        typescript_1.factory.createExpressionStatement(createPrintCallExpression([(0, shared_1.createExpressionDebugPrefixLiteral)(argument), id])),
        typescript_1.factory.createReturnStatement(id),
    ], true);
}
exports.createIIFEBlock = createIIFEBlock;
/**
 * Creates an object with debug information about the specified expression
 * @param expression The expression
 */
function createDebugObject(expression) {
    var info = (0, shared_1.getDebugInfo)(expression);
    return typescript_1.factory.createObjectLiteralExpression([
        typescript_1.factory.createPropertyAssignment("file", typescript_1.factory.createStringLiteral(info.relativePath)),
        typescript_1.factory.createPropertyAssignment("lineNumber", typescript_1.factory.createNumericLiteral(info.linePos)),
        typescript_1.factory.createPropertyAssignment("rawText", typescript_1.factory.createStringLiteral(expression.getText())),
    ], true);
}
exports.createDebugObject = createDebugObject;
/**
 * Creates a custom IIFE block based on user input
 * @param expression
 * @param body
 * @param debugInfoParam
 */
function createCustomIIFEBlock(expression, body, sourceId, debugInfoParam) {
    if (typescript_1.default.isBlock(body)) {
        var newBody = __spreadArray([], body.statements, true);
        if (debugInfoParam !== undefined) {
            newBody.unshift(typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                typescript_1.factory.createVariableDeclaration(typescript_1.factory.createIdentifier(debugInfoParam.name.getText()), undefined, undefined, createDebugObject(expression)),
            ], typescript_1.default.NodeFlags.Const)));
        }
        newBody.push(typescript_1.factory.createReturnStatement(sourceId));
        return typescript_1.factory.createBlock(newBody);
    }
    else {
        var id = typescript_1.factory.createIdentifier("value");
        return createIIFEBlock(id, expression);
    }
}
exports.createCustomIIFEBlock = createCustomIIFEBlock;
function transformToIIFEDebugPrint(expression, customHandler, program) {
    if (customHandler) {
        if (typescript_1.default.isArrowFunction(customHandler) || typescript_1.default.isFunctionExpression(customHandler)) {
            var body = customHandler.body, _a = customHandler.parameters, sourceParam = _a[0], debugInfo = _a[1];
            var valueId = typescript_1.factory.createIdentifier(sourceParam.name.getText());
            var checker = program.getTypeChecker();
            var methodSignature = checker.getSignatureFromDeclaration(customHandler);
            if (methodSignature) {
                var returnType = methodSignature.getReturnType();
                var returnSymbol = returnType.getSymbol();
                if (returnSymbol) {
                    throw (0, shared_1.formatTransformerDiagnostic)("argument 'customHandler' should return void, got " + returnSymbol.getName(), customHandler);
                }
                else {
                    // I don't know if there's any other sane way here.
                    var typeString = checker.typeToString(returnType);
                    if (typeString !== "void") {
                        throw (0, shared_1.formatTransformerDiagnostic)("argument 'customHandler' should return void, got " + typeString, customHandler);
                    }
                }
            }
            return typescript_1.factory.createCallExpression(typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createArrowFunction(undefined, undefined, [typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, valueId)], undefined, undefined, createCustomIIFEBlock(expression, body, valueId, debugInfo))), undefined, [expression]);
        }
        else if (typescript_1.default.isIdentifier(customHandler) || typescript_1.default.isPropertyAccessExpression(customHandler)) {
            var id = typescript_1.factory.createUniqueName("value");
            var tmp = typescript_1.factory.createUniqueName("debugInfo");
            return typescript_1.factory.createCallExpression(typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createArrowFunction(undefined, undefined, [typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, id)], undefined, undefined, typescript_1.factory.createBlock([
                typescript_1.factory.createVariableStatement(undefined, typescript_1.factory.createVariableDeclarationList([
                    typescript_1.factory.createVariableDeclaration(tmp, undefined, undefined, createDebugObject(expression)),
                ], typescript_1.default.NodeFlags.Const)),
                typescript_1.factory.createExpressionStatement(typescript_1.factory.createCallExpression(customHandler, undefined, [id, tmp])),
                typescript_1.factory.createReturnStatement(id),
            ]))), undefined, [expression]);
        }
        else {
            throw (0, shared_1.formatTransformerDiagnostic)(typescript_1.default.SyntaxKind[customHandler.kind] + " not supported in custom $dbg handler", customHandler);
        }
    }
    else {
        var id = typescript_1.factory.createUniqueName("value");
        return typescript_1.factory.createCallExpression(typescript_1.factory.createParenthesizedExpression(typescript_1.factory.createArrowFunction(undefined, undefined, [typescript_1.factory.createParameterDeclaration(undefined, undefined, undefined, id)], undefined, undefined, createIIFEBlock(id, expression))), undefined, [expression]);
    }
}
exports.transformToIIFEDebugPrint = transformToIIFEDebugPrint;
