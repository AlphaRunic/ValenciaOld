"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDebuggedClass = exports.createDebugBlock = void 0;
var typescript_1 = __importStar(require("typescript"));
function membersOfClass(node) {
    return node.members.filter(function (child) { return typescript_1.default.isPropertyDeclaration(child); });
}
function createDebugBlock(node) {
    var props = membersOfClass(node);
    var statements = new Array();
    // for (const prop of props) {
    // 	if (ts.isPropertyDeclaration(prop)) {
    // 	}
    // }
    statements.push(typescript_1.factory.createReturnStatement());
    return typescript_1.factory.createBlock(statements);
}
exports.createDebugBlock = createDebugBlock;
function createDebuggedClass(node, decorators, _a) {
    var enabled = _a.enabled;
    return typescript_1.factory.updateClassDeclaration(node, decorators, node.modifiers, node.name, node.typeParameters, node.heritageClauses, enabled
        ? __spreadArrays(node.members.filter(function (f) { return !(typescript_1.default.isMethodDeclaration(f) && f.name.getText() === "toString"); }), [
            typescript_1.factory.createMethodDeclaration(undefined, undefined, undefined, "toString", undefined, undefined, [], undefined, createDebugBlock(node)),
        ]) : node.members);
}
exports.createDebuggedClass = createDebuggedClass;
