"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformNameOf = void 0;
var typescript_1 = __importStar(require("typescript"));
var shared_1 = require("./shared");
function transformNameOf(expression, program) {
    var argument = expression.arguments[0];
    var typeArguments = expression.typeArguments;
    if (typeArguments !== undefined) {
        var type = typeArguments[0];
        if (typescript_1.default.isTypeQueryNode(type)) {
            throw (0, shared_1.formatTransformerDiagnostic)("Type queries are not supported by nameof<T>() (where T: " + type.getText() + ")", type, "Use $nameof(" + type.exprName.getText() + ") instead.");
        }
        else {
            if (typescript_1.default.isTypeReferenceNode(type)) {
                return typescript_1.factory.createStringLiteral(type.getText());
            }
            else {
                throw (0, shared_1.formatTransformerDiagnostic)("Not supported by $nameof<T>(): " + typescript_1.default.SyntaxKind[type.kind] + (" (where T : " + type.getText() + ")"), type);
            }
        }
    }
    else {
        if (typescript_1.default.isIdentifier(argument)) {
            return typescript_1.factory.createStringLiteral(argument.text);
        }
        else if (typescript_1.default.isStringLiteral(argument)) {
            return argument;
        }
    }
    return expression;
}
exports.transformNameOf = transformNameOf;
