"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformCommitId = void 0;
var child_process_1 = require("child_process");
var typescript_1 = __importStar(require("typescript"));
var shared_1 = require("./shared");
var commit;
function transformCommitId(expression) {
    var argument = expression.arguments[0];
    if (commit === undefined) {
        try {
            commit = child_process_1.execSync("git rev-parse HEAD").toString().replace("\n", "");
        }
        catch (err) {
            throw shared_1.formatTransformerDiagnostic("Failed to grab git commit hash. Git not in PATH or project is not using git.", expression, err);
        }
    }
    if (argument && argument.kind === typescript_1.default.SyntaxKind.TrueKeyword) {
        return typescript_1.factory.createStringLiteral(commit);
    }
    else {
        return typescript_1.factory.createStringLiteral(commit.substr(0, 7));
    }
}
exports.transformCommitId = transformCommitId;
